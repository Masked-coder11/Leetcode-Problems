class Solution {
public:
    TreeNode* f(vector<int>&inorder, vector<int>&postorder, int postStart, int postEnd, int inStart, int inEnd){
        if(postStart>postEnd) return NULL;
        if(postStart==postEnd) return new TreeNode(postorder[postEnd]);

        int val=postorder[postEnd];
        TreeNode* root= new TreeNode(val);

        int ind=-1;
        for(int i=inStart;i<=inEnd;i++){
            if(inorder[i]==val){
                ind=i;
                break;
            }
        }

        int left=ind-inStart;
        int right=inEnd-ind;

        root->right = f(inorder, postorder, postEnd-right, postEnd-1, ind+1, inEnd);
        root->left= f(inorder, postorder, postStart, postStart+left-1, inStart, ind-1);

        return root;

    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
            int n=inorder.size();
            return f(inorder, postorder, 0, n-1, 0, n-1);
    }
};
