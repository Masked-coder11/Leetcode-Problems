/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* f(vector<int>&preorder, vector<int>&postorder, int preStart, int preEnd, int postStart, int postEnd){
        if(preStart>preEnd) return NULL;
        if(preStart==preEnd) return new TreeNode(preorder[preStart]);

        TreeNode* root=new TreeNode(preorder[preStart]);
        int val=preorder[preStart+1];
        int ind=-1;
        for(int i=postStart;i<=postEnd;i++){
            if(postorder[i]==val){
                ind=i;
                break;
            }
        }

        int left=ind-postStart+1;
        int right=postEnd-ind-1;

        root->right=f(preorder, postorder, preEnd-(right-1), preEnd, postEnd-right, postEnd-1);
        root->left= f(preorder, postorder, preStart+1, preStart+left, postStart, postStart+left-1);

        return root;

    }

    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        int n=preorder.size();
        return f(preorder, postorder, 0, n-1, 0, n-1);
    }
};
