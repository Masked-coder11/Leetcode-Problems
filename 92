class Solution {
public:
    pair<ListNode*, ListNode*> reverse(ListNode* head){
        if(!head || !head->next) return {head,head};
        ListNode* second=head;
        ListNode*prev=NULL, *temp=head;
        while(temp){
            ListNode*next=temp->next;
            temp->next=prev;
            prev=temp;
            temp=next;
        }

        return {prev, second};

    }

    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(!head || !head->next) return head;
        if(left==right) return head;

        ListNode*prev=NULL, *tH=head, *tE=head,*next;
        while(left-1){
            prev=tH;
            tH=tH->next;
            left--;
        }
        while(right-1){
            tE=tE->next;
            right--;
        }

        next=tE->next;

        if(prev) prev->next=NULL;
        tE->next=NULL;

        pair<ListNode*, ListNode*> ans=reverse(tH);

        if(prev) prev->next=ans.first;
        else head=ans.first;

        ans.second->next=next;

        return head;        
    }
};
