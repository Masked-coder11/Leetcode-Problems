class Solution {
public:
    TreeNode* helper(vector<int>& preorder, vector<int>& inorder, int preStart, int preEnd, int inStart, int inEnd){
        if(preStart > preEnd) return NULL;
        TreeNode* root= new TreeNode(preorder[preStart]);
        int ind=-1;
        for(int i=inStart;i<=inEnd;i++){
            if(inorder[i]==preorder[preStart]){
                ind=i;
                break;
            }
        }
        int leftSubtree=ind-inStart;
        int rightSubtree=inEnd-ind;

        root->left= helper(preorder, inorder, preStart+1, preStart+leftSubtree, inStart, ind-1);
        root->right= helper(preorder, inorder, preEnd-rightSubtree+1, preEnd, ind+1, inEnd);


        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n=preorder.size();
        return helper(preorder, inorder, 0, n-1, 0, n-1);
    }
};
