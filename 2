/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head){
        if(!head || !head->next) return head;

        ListNode*prev=NULL, *temp=head, *next=head->next;
        while(next){
            temp->next=prev;
            prev=temp;
            temp=next;
            next=temp->next;
        }
        temp->next=prev;

        return temp;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;


        ListNode* head=l1;

        ListNode* tail;

        int carry=0;
        while(l1 && l2){
            l1->val += carry+l2->val;
            carry=l1->val/10;
            l1->val %= 10;

            tail=l1;

            l1=l1->next;
            l2=l2->next;
        }
        if(l2){
            tail->next=l2;
            l1=l2;
        }
        while(l1){
            l1->val+=carry;
            carry=l1->val/10;
            l1->val %= 10;
            tail=l1;
            l1=l1->next;
        }

        l1=tail;
        while(carry){
            l1->next=new ListNode(carry);
            carry=l1->val/10;
            l1->val %= 10;
            l1=l1->next;
        }


        return head;
        
        
    }
};
