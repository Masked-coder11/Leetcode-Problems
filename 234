
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *slow = head, *fast = head;
        while (fast && fast->next && fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow;
    }
    ListNode* reverseList(ListNode* head) {
        if (head == NULL || head->next == NULL) {
            return head;
        }

        ListNode* prev = NULL;
        ListNode* temp = head;

        while (temp != NULL) {
            ListNode* next = temp->next;
            temp->next = prev;
            prev = temp;
            temp = next;
        }

        return prev;
    }

    bool isPalindrome(ListNode* head) {
        if(!head) return true;

        ListNode* mid=middleNode(head);
        ListNode* a=head, *b=mid->next;
        mid->next=NULL;

        b=reverseList(b);

        while(a && b){
            if(a->val != b->val) return false;

            a=a->next;
            b=b->next;
        }

        return true;
    }
};
